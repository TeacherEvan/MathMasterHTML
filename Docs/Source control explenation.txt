# Visual Studio Source Control - Essential Guide

## Overview
Source control (Git) in Visual Studio is a version control system that tracks changes to your code over time. It allows you to save snapshots of your work, collaborate with others, and maintain a history of your project's evolution.

## Key Concepts

### 1. Working Directory vs Repository
- **Working Directory**: Your local files that you're currently editing
- **Repository**: The Git database that stores all versions and history of your project

### 2. Staged vs Unstaged Changes

#### Unstaged Changes
- Files you've modified but haven't prepared for commit
- Shown in VS Code with an "M" (modified) or "U" (untracked) indicator
- These changes exist only in your working directory

#### Staged Changes
- Files you've marked to be included in the next commit
- Use "+" button or `git add` to stage changes
- Staged files are ready to be committed to the repository
- Shown with a green "A" (added) indicator

### 3. Core Operations

#### Saving Changes
1. **Stage changes**: Select which files to include in your commit
2. **Commit**: Create a snapshot with a descriptive message
3. **Push**: Upload your commits to the remote repository

#### Pulling vs Fetching vs Syncing
- **Fetch**: Downloads new data from remote but doesn't merge it
- **Pull**: Fetches AND merges remote changes into your current branch
- **Sync**: VS Code's combined operation that pulls first, then pushes your changes

## Common Problem: Work Being Reverted to Outdated Versions

### Why This Happens
This issue typically occurs due to:

1. **Merge Conflicts**: When remote changes conflict with your local changes
2. **Force Push**: Someone overwrote the remote history
3. **Working on Wrong Branch**: Your changes might be on a different branch
4. **Uncommitted Changes**: Your work wasn't properly committed before syncing

### Prevention Strategies

#### Before Making Changes
1. **Always pull first**: Ensure you have the latest version
2. **Check your branch**: Verify you're on the correct branch
3. **Commit frequently**: Save your work in small, logical chunks

#### Proper Workflow
1. **Pull** latest changes from remote
2. **Make** your changes
3. **Stage** the files you want to commit
4. **Commit** with a clear message
5. **Push** to share your changes

#### When Syncing
1. **Commit your work first**: Never sync with uncommitted changes
2. **Review incoming changes**: Check what will be merged
3. **Resolve conflicts carefully**: Don't automatically accept all incoming changes

### Recovery Steps if Your Work Gets Reverted

1. **Check Git History**:
   - Go to Source Control view
   - Click on "View History" to see commit timeline
   - Look for your commits - they might still exist

2. **Use Git Reflog**:
   ```
   git reflog
   ```
   Shows all recent actions, including "lost" commits

3. **Create a Branch from Lost Commit**:
   ```
   git checkout -b recovery-branch <commit-hash>
   ```

4. **Cherry-pick Specific Changes**:
   ```
   git cherry-pick <commit-hash>
   ```

## Best Practices

### Daily Workflow
1. Start by pulling the latest changes
2. Work on small, focused features
3. Commit often with clear messages
4. Push regularly to backup your work

### Commit Messages
- Use present tense: "Add feature" not "Added feature"
- Be specific: "Fix login validation bug" not "Fix bug"
- Keep first line under 50 characters

### Branch Management
- Use feature branches for new work
- Keep main/master branch stable
- Merge only tested, working code

### Conflict Resolution
- Always review conflicts carefully
- Test thoroughly after resolving conflicts
- When in doubt, ask team members for help

## Visual Studio Source Control Interface

### Source Control Panel
- **Changes**: Shows modified files (unstaged)
- **Staged Changes**: Files ready to commit
- **Message box**: Where you write commit messages
- **Commit button**: Creates the commit
- **Sync/Push/Pull buttons**: Manage remote synchronization

### File Status Indicators
- **M**: Modified file
- **A**: Added file
- **D**: Deleted file
- **U**: Untracked file
- **C**: Conflicted file

## Troubleshooting Common Issues

### "Your branch is behind"
- Solution: Pull the latest changes before pushing

### "Merge conflict"
- Open conflicted files
- Resolve conflicts manually
- Stage resolved files
- Commit the merge

### "Nothing to commit"
- Check if files are staged
- Verify you've saved your changes
- Ensure you're in the correct directory

## Emergency Commands

### Undo Last Commit (but keep changes)
```
git reset --soft HEAD~1
```

### Discard All Local Changes
```
git reset --hard HEAD
```

### See What Changed
```
git diff
git diff --staged
```

### View Commit History
```
git log --oneline
```

## Key Takeaway

The most important rule: **Always commit your work before syncing with remote**. This ensures your changes are saved in Git's history and can be recovered even if something goes wrong during the sync process.

Remember: Git is designed to preserve history, so your work is rarely truly lost - it just might require some detective work to find it again.

## Practical Example: Creating a Tetris Game with Copilot

### Project Setup and Initial Source Control

#### Step 1: Project Initialization
**User Action**: Create new folder and initialize Git
```powershell
mkdir tetris-game
cd tetris-game
git init
```

**Source Control**: Repository created locally

#### Step 2: Connect to Remote Repository
**User Action**: Create GitHub repository and connect
```powershell
git remote add origin https://github.com/username/tetris-game.git
```

### Development Workflow with Copilot

#### Phase 1: Basic Game Structure
**User Prompt to Copilot**:
"Create a basic HTML5 Tetris game with a canvas element. I need the basic structure with HTML, CSS, and JavaScript files. Include a game board, basic styling, and placeholder functions for game logic."

**AI Role**: 
- Creates `index.html`, `style.css`, `script.js`
- Provides basic game structure and canvas setup
- Includes placeholder functions for game mechanics

**User Role**:
- Reviews generated code
- Tests in browser
- Makes adjustments if needed

**Source Control Action**:
```powershell
git add .
git commit -m "Initial project setup - HTML structure and canvas"
git push -u origin main
```

#### Phase 2: Game Board and Tetromino Shapes
**User Prompt to Copilot**:
"Add the Tetris game board logic. Create a 2D array to represent the game board (20 rows x 10 columns). Define all 7 Tetromino shapes (I, O, T, S, Z, J, L) with their rotations. Include functions to draw the board and pieces."

**AI Role**:
- Implements game board array
- Creates Tetromino shape definitions
- Adds rendering functions

**User Role**:
- Tests shape rendering
- Verifies board boundaries

**Source Control Action**:
```powershell
git add script.js
git commit -m "Add game board and Tetromino shape definitions"
git push
```

#### Phase 3: Piece Movement and Rotation
**User Prompt to Copilot**:
"Implement piece movement controls (left, right, down) and rotation. Add collision detection to prevent pieces from moving outside boundaries or into occupied spaces. Include keyboard event handlers for arrow keys and spacebar."

**AI Role**:
- Adds movement functions
- Implements collision detection
- Creates keyboard event handlers

**User Role**:
- Tests controls
- Adjusts sensitivity if needed

**Source Control Action**:
```powershell
git add script.js
git commit -m "Implement piece movement and collision detection"
git push
```

#### Phase 4: Line Clearing and Scoring
**User Prompt to Copilot**:
"Add line clearing functionality when a row is complete. Implement scoring system (100 points per line, bonus for multiple lines). Add level progression that increases falling speed. Display score and level on screen."

**AI Role**:
- Implements line detection and clearing
- Adds scoring system
- Creates level progression logic

**User Role**:
- Tests line clearing
- Balances scoring values

**Source Control Actions**:
```powershell
# After testing basic functionality
git add script.js index.html
git commit -m "Add line clearing and basic scoring"

# After adjusting scoring balance
git add script.js
git commit -m "Balance scoring system and level progression"
git push
```

#### Phase 5: Game States and Polish
**User Prompt to Copilot**:
"Add game over detection, start/pause/restart functionality. Include a preview of the next piece. Add sound effects and improved styling. Create a game over screen with restart option."

**AI Role**:
- Implements game state management
- Adds next piece preview
- Creates game over screen

**User Role**:
- Tests all game states
- Fine-tunes styling
- Adds personal touches

**Source Control Actions**:
```powershell
# Major feature complete
git add .
git commit -m "Add game states, next piece preview, and game over screen"

# Styling improvements
git add style.css
git commit -m "Improve visual styling and animations"

# Final polish
git add .
git commit -m "Add sound effects and final polish"
git push
```

### Source Control Best Practices During Development

#### When to Commit:
1. **After each major feature**: Game board, piece movement, line clearing
2. **Before testing**: Save working state before experimenting
3. **After bug fixes**: Document what was fixed
4. **End of each session**: Backup your progress

#### When to Push:
1. **After completing a feature**: Share stable milestones
2. **End of development session**: Backup to remote
3. **Before major refactoring**: Ensure you can revert if needed

#### Sample Commit Messages:
```
✅ Good Examples:
"Add basic Tetris game structure and canvas setup"
"Implement piece rotation with collision detection"
"Fix bug where pieces could move outside left boundary"
"Add scoring system with level progression"

❌ Bad Examples:
"Update game"
"Fixed stuff"
"Made changes"
"WIP"
```

### Collaboration Workflow

#### If Working with Others:
1. **Before starting work**:
   ```powershell
   git pull origin main
   ```

2. **Create feature branch**:
   ```powershell
   git checkout -b feature/sound-effects
   ```

3. **After completing feature**:
   ```powershell
   git add .
   git commit -m "Add sound effects for line clearing and game over"
   git push origin feature/sound-effects
   ```

4. **Create pull request** for code review

### Emergency Scenarios and Recovery

#### Scenario: Copilot suggestion breaks the game
**Problem**: AI suggests code that introduces bugs

**Solution**:
```powershell
# Check what changed
git diff HEAD~1

# Revert to last working commit
git reset --hard HEAD~1

# Or revert specific file
git checkout HEAD~1 -- script.js
```

#### Scenario: Lost work after sync conflict
**Problem**: Local changes overwritten during pull

**Solution**:
```powershell
# Find lost commits
git reflog

# Recover specific commit
git checkout -b recovery-branch abc1234

# Cherry-pick specific changes
git cherry-pick abc1234
```

### Project Completion Checklist

#### Final Source Control Steps:
1. **Clean up commit history** (if needed):
   ```powershell
   git rebase -i HEAD~5  # Interactive rebase last 5 commits
   ```

2. **Tag release version**:
   ```powershell
   git tag -a v1.0 -m "Tetris Game v1.0 - Initial Release"
   git push origin v1.0
   ```

3. **Create release branch**:
   ```powershell
   git checkout -b release/v1.0
   git push origin release/v1.0
   ```

4. **Update README with setup instructions**

This workflow demonstrates how source control integrates naturally with AI-assisted development, ensuring your progress is always preserved and you can experiment confidently knowing you can always revert to a working state.